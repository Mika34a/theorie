Our first algorithm is a greedy algorithm that prioritises batteries based on 
their proximity to the house in question.While looping through all the houses, 
the code creates lists of batteries based on the manhattan distance between the 
house and the battery. With a sample of N = 30 tests, we gathered new results. 
The total costs were on average 61864 with a SD of 720,7. The lowest costs being 
59830 Compared to our baseline, the costs were greatly reduced by at least 15000 
with the margin of change cut by half.
    Comparing the results between the baseline and our first algorithm, we've noticed 
an increase in productivity with the greedy algorithm. As expected, our greedy 
algorithm reduced costs by creating shorter cables and even seems to automatically
create districts of houses near specific batteries. In our grid visualisation you 
can easily see all the cables of houses leading towards the corresponding batteries.
